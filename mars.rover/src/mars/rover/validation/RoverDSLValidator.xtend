/*
 * generated by Xtext 2.23.0
 */
package mars.rover.validation

import org.eclipse.xtext.validation.Check
import mars.rover.roverDSL.MissionType
import mars.rover.roverDSL.Mission
import mars.rover.roverDSL.Colors
import mars.rover.roverDSL.Safety
import mars.rover.roverDSL.RoverDSLPackage$Literals
/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class RoverDSLValidator extends AbstractRoverDSLValidator { //	public static final String INVALID_NAME = "invalidName";
	
	
	@Check
	def checkMissionType(Mission mission) {
		if (mission.missiontype == MissionType.FIND_COLORS) {
			if (mission.colorlist.isEmpty()) {
				error("For this mission, at least one color should be specified (Colors: <Color>).",null)
			}
		}
		else {
			error("Only FindColors is implemented at this moment.",null)
			// mission has to be FindColors at this moment
			/**if (mission.colorlist.isEmpty()) {
				error("For this mission, at least one color should be specified (Colors: <Color>).",null)
			}**/
		}
	}
	
	@Check
	// warn when safety is off, warn if lake colors are not given when Safety: On
	def checkSafety(Mission mission) {
		if (mission.safetyproperty == Safety.OFF) {
			warning("Are you sure you want to turn off safety features?",Literals.MISSION__SAFETYPROPERTY)
		} else {
			if (mission.lakelist.isEmpty()) {
				warning("Are you sure there are no lakes on the map?",null)
			}
		}
	}
	
	@Check
	def checkLakeColors(Mission mission) {
		if (mission.bordercolor !== null) {
			if(mission.lakelist.contains(mission.bordercolor.color)) {
				warning("Are you sure the border has the same color as a lake?",Literals.MISSION__BORDERCOLOR)
			}
		}
	}
	
	@Check
	def checkBeginSentence(Mission mission) {
		//possible check
	}
	
	@Check
	// warn if the border is not default (white)
	def checkOuterBorder(Mission mission) {
		if (mission.bordercolor !== null) {
			if (mission.bordercolor.color != Colors.WHITE) {
				warning("Are you sure this is the color of the border?", Literals.MISSION__BORDERCOLOR)
			}
		}
	}
	
	@Check
	// check input
	def checkForwardSpeed(Mission mission) {
		if(mission.forwardspeed !== null) {
			if(mission.forwardspeed.integer < 1 || mission.forwardspeed.integer > 100) {
				error("Please give a correct speed value (1-100).",Literals.MISSION__FORWARDSPEED)
			}
		}
	}
	
	@Check
	// check input
	def checkReverseSpeed(Mission mission) {
		if(mission.reversespeed !== null) {	
			if(mission.reversespeed.integer < 1 || mission.reversespeed.integer > 100) {
				error("Please give a correct speed value (1-100).",Literals.MISSION__REVERSESPEED)
			}
		}
	}
	
	@Check
	// check input
	def checkTurnDirection(Mission mission) {
		if(mission.turndirection !== null) {	
			if(mission.turndirection.integer < 1 || mission.turndirection.integer > 360){
				error("Please give a correct turndirection value (1-360).",Literals.MISSION__TURNDIRECTION)
			}
		}
	}
	
	@Check
	// check for colors being used twice
	def checkColors(Mission mission) {
		var clist = mission.colorlist
		for (var i=0; i< clist.size;i++) {
			// avoid using the same color twice
			for (var j = i+1; j < clist.size; j++) {
				if (clist.get(i).equals(clist.get(j))) {
					error("Cannot use the same color twice for the mission.",Literals.MISSION__COLORLIST)
				}
			}
			// avoid conflicts for using the border color in the mission
			if (mission.bordercolor !== null) {	
				if (clist.get(i) == mission.bordercolor.color && mission.missiontype != MissionType.AVOID_COLORS) {
					error("The color of the border is reused for the mission.",Literals.MISSION__BORDERCOLOR)
				}
			} else {
				if (clist.get(i) == Colors.WHITE && mission.missiontype != MissionType.AVOID_COLORS) {
					error("The color of the border is reused for the mission.",Literals.MISSION__BORDERCOLOR)
				}
			}
		}
	}
	
	@Check
	def checkEnd(Mission mission) {
		//possible check
	}
	
	@Check
	def checkFlashingColor(Mission mission) {
		//possible check
	}
	
	@Check
	def checkFinalSentence(Mission mission) {
		//possible check
	}
	
	/** @Check
	// check input
	def checkColor(Colors c) {
		if (c.color != 'White' && c.color != 'Red' && c.color != 'Yellow' && c.color != 'Blue' && c.color != 'Black') {
			error("Please give a viable color ('White', 'Red', 'Yellow', 'Blue' or 'Black').",null)
		}
	}**/
	
	/**@Check
	// check input
	def checkSensor(Sensors s) {
		if (s.sensor != 'Touch' && s.sensor != 'Ultrasonic' && s.sensor != 'Color') {
			error("Please give a viable sensor ('Color', 'Ultrasonic' or 'Touch').",null)
		}
	}**/
	
	/**@Check
	def checkSensors(Mission mission) {
		//possible check
	}**/
}
