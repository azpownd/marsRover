/*
 * generated by Xtext 2.23.0
 */
package mars.rover.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mars.rover.roverDSL.Color;
import mars.rover.roverDSL.Mission;
import mars.rover.roverDSL.RoverDSLPackage;
import mars.rover.roverDSL.Tasks;
import mars.rover.services.RoverDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RoverDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RoverDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RoverDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RoverDSLPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case RoverDSLPackage.INTEGER:
				sequence_Integer(context, (mars.rover.roverDSL.Integer) semanticObject); 
				return; 
			case RoverDSLPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case RoverDSLPackage.TASKS:
				sequence_Tasks(context, (Tasks) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Color returns Color
	 *
	 * Constraint:
	 *     color=Colors
	 */
	protected void sequence_Color(ISerializationContext context, Color semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverDSLPackage.Literals.COLOR__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverDSLPackage.Literals.COLOR__COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColorAccess().getColorColorsEnumRuleCall_0(), semanticObject.getColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Integer returns Integer
	 *
	 * Constraint:
	 *     integer=INT
	 */
	protected void sequence_Integer(ISerializationContext context, mars.rover.roverDSL.Integer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverDSLPackage.Literals.INTEGER__INTEGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverDSLPackage.Literals.INTEGER__INTEGER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerAccess().getIntegerINTTerminalRuleCall_0(), semanticObject.getInteger());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (
	 *         missiontype=MissionType 
	 *         beginsentence=STRING? 
	 *         finalsentence=STRING? 
	 *         forwardspeed=Integer? 
	 *         reversespeed=Integer? 
	 *         turndirection=Integer? 
	 *         safetyproperty=Safety? 
	 *         objectdistance=Integer? 
	 *         bordercolor=Color? 
	 *         lakelist+=Colors* 
	 *         colorlist+=Colors* 
	 *         measurelist+=Colors* 
	 *         flashingcolor=Color? 
	 *         timeout=Integer?
	 *     )
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tasks returns Tasks
	 *
	 * Constraint:
	 *     missionlist+=Mission+
	 */
	protected void sequence_Tasks(ISerializationContext context, Tasks semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
