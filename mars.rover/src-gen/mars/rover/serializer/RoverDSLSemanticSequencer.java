/*
 * generated by Xtext 2.23.0
 */
package mars.rover.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mars.rover.roverDSL.Mission;
import mars.rover.roverDSL.RoverDSLPackage;
import mars.rover.services.RoverDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class RoverDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RoverDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RoverDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RoverDSLPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (
	 *         missiontype=MissionType 
	 *         safetyproperty=Safety? 
	 *         lakelist+=Colors* 
	 *         beginsentence=STRING? 
	 *         border=Colors? 
	 *         forwardspeed=INT? 
	 *         reversespeed=INT? 
	 *         turndirection=INT? 
	 *         colorlist+=Colors* 
	 *         terminationcondition=STRING 
	 *         flashingcolor=Colors? 
	 *         finalsentence=STRING?
	 *     )
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
