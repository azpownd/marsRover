/*
 * generated by Xtext 2.23.0
 */
package mars.rover.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mars.rover.roverDSL.Colors;
import mars.rover.roverDSL.Mission;
import mars.rover.roverDSL.RoverDSLPackage;
import mars.rover.roverDSL.Sensors;
import mars.rover.services.RoverDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RoverDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RoverDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RoverDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RoverDSLPackage.COLORS:
				sequence_Colors(context, (Colors) semanticObject); 
				return; 
			case RoverDSLPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case RoverDSLPackage.SENSORS:
				sequence_Sensors(context, (Sensors) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Colors returns Colors
	 *
	 * Constraint:
	 *     color=STRING
	 */
	protected void sequence_Colors(ISerializationContext context, Colors semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverDSLPackage.Literals.COLORS__COLOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverDSLPackage.Literals.COLORS__COLOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColorsAccess().getColorSTRINGTerminalRuleCall_0(), semanticObject.getColor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (
	 *         missiontype=MissionType 
	 *         border=STRING 
	 *         forwardspeed=INT 
	 *         reversespeed=INT 
	 *         turndirection=STRING 
	 *         colorlist+=Colors* 
	 *         sensorlist+=Sensors* 
	 *         terminationcondition=STRING 
	 *         flashingcolor=STRING 
	 *         finalsentence=STRING
	 *     )
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensors returns Sensors
	 *
	 * Constraint:
	 *     sensor=STRING
	 */
	protected void sequence_Sensors(ISerializationContext context, Sensors semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverDSLPackage.Literals.SENSORS__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverDSLPackage.Literals.SENSORS__SENSOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorsAccess().getSensorSTRINGTerminalRuleCall_0(), semanticObject.getSensor());
		feeder.finish();
	}
	
	
}
