/*
 * generated by Xtext 2.23.0
 */
package mars.rover.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mars.rover.ide.contentassist.antlr.internal.InternalRoverDSLParser;
import mars.rover.services.RoverDSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RoverDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RoverDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RoverDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMissionTypeAccess().getAlternatives(), "rule__MissionType__Alternatives");
			builder.put(grammarAccess.getMissionAccess().getGroup(), "rule__Mission__Group__0");
			builder.put(grammarAccess.getMissionAccess().getGroup_10(), "rule__Mission__Group_10__0");
			builder.put(grammarAccess.getMissionAccess().getGroup_11(), "rule__Mission__Group_11__0");
			builder.put(grammarAccess.getMissionAccess().getMissiontypeAssignment_1(), "rule__Mission__MissiontypeAssignment_1");
			builder.put(grammarAccess.getMissionAccess().getBorderAssignment_3(), "rule__Mission__BorderAssignment_3");
			builder.put(grammarAccess.getMissionAccess().getForwardspeedAssignment_5(), "rule__Mission__ForwardspeedAssignment_5");
			builder.put(grammarAccess.getMissionAccess().getReversespeedAssignment_7(), "rule__Mission__ReversespeedAssignment_7");
			builder.put(grammarAccess.getMissionAccess().getTurndirectionAssignment_9(), "rule__Mission__TurndirectionAssignment_9");
			builder.put(grammarAccess.getMissionAccess().getColorlistAssignment_10_1(), "rule__Mission__ColorlistAssignment_10_1");
			builder.put(grammarAccess.getMissionAccess().getSensorlistAssignment_11_1(), "rule__Mission__SensorlistAssignment_11_1");
			builder.put(grammarAccess.getMissionAccess().getTerminationconditionAssignment_13(), "rule__Mission__TerminationconditionAssignment_13");
			builder.put(grammarAccess.getMissionAccess().getFlashingcolorAssignment_15(), "rule__Mission__FlashingcolorAssignment_15");
			builder.put(grammarAccess.getMissionAccess().getFinalsentenceAssignment_17(), "rule__Mission__FinalsentenceAssignment_17");
			builder.put(grammarAccess.getColorsAccess().getColorAssignment(), "rule__Colors__ColorAssignment");
			builder.put(grammarAccess.getSensorsAccess().getSensorAssignment(), "rule__Sensors__SensorAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RoverDSLGrammarAccess grammarAccess;

	@Override
	protected InternalRoverDSLParser createParser() {
		InternalRoverDSLParser result = new InternalRoverDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RoverDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RoverDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
